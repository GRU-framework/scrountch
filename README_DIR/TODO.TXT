// site I-music-school

- every message should be managedby I18N (eg. Exception argument!)

- support assistive technologies! (also with I18N)


- create a collision Event manager
Collisions specs is a complete mess: there exists 2 different
ones: in Cell and in Collisions -> think!


 distinguish between boundsCollision and AreaCollision and AreaToBoundsCollision
 have an enum ON, SOUTH, NORTH, EST, WEST (I18N) , AFTER

 - do the scrountch jar
 - and utility to create an application jar



///////////// END
- selection rectangle avec souris, extraction image du rectangle sélectionné
use a transparent layer on top of Cell

public PaintSurface() {
      this.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent e) {
          startDrag = new Point(e.getX(), e.getY());
          endDrag = startDrag;
          repaint();
        }

        public void mouseReleased(MouseEvent e) {
          Shape r = makeRectangle(startDrag.x, startDrag.y, e.getX(), e.getY());
          shapes.add(r);
          startDrag = null;
          endDrag = null;
          repaint();
        }
      });

      this.addMouseMotionListener(new MouseMotionAdapter() {
        public void mouseDragged(MouseEvent e) {
          endDrag = new Point(e.getX(), e.getY());
          repaint();
        }
      });
    }
     public void paint(Graphics g) {
          Graphics2D g2 = (Graphics2D) g;
          g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
          paintBackground(g2);
          Color[] colors = { Color.YELLOW, Color.MAGENTA, Color.CYAN , Color.RED, Color.BLUE, Color.PINK};
          int colorIndex = 0;

          g2.setStroke(new BasicStroke(2));
          g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.50f));

          for (Shape s : shapes) {
            g2.setPaint(Color.BLACK);
            g2.draw(s);
            g2.setPaint(colors[(colorIndex++) % 6]);
            g2.fill(s);
          }

          if (startDrag != null && endDrag != null) {
            g2.setPaint(Color.LIGHT_GRAY);
            Shape r = makeRectangle(startDrag.x, startDrag.y, endDrag.x, endDrag.y);
            g2.draw(r);
          }
        }

        private Rectangle2D.Float makeRectangle(int x1, int y1, int x2, int y2) {
          return new Rectangle2D.Float(Math.min(x1, x2), Math.min(y1, y2), Math.abs(x1 - x2), Math.abs(y1 - y2));
        }
      }

    //////////// DASHED STROKE
    final static float dash1[] = {10.0f};
        final static BasicStroke dashed =
            new BasicStroke(1.0f,
                            BasicStroke.CAP_BUTT,
                            BasicStroke.JOIN_MITER,
                            10.0f, dash1, 0.0f);
    g2.setStroke(dashed);
    g2.draw(new RoundRectangle2D.Double(x, y,
                                       rectWidth,
                                       rectHeight,
                                       10, 10));

    ---------------------------
    Container pane = frame.getContentPane();
    BufferedImage img = new BufferedImage(pane.getWidth(), pane.getHeight(), BufferedImage.TYPE_INT_RGB);
    Graphics2D g2d = img.createGraphics();
    pane.printAll(g2d);
    g2d.dispose()
    ------------------------------------

- images: sepia, grey, save image in file


______________________________________________________
        /*
         // slightly enhance the red, slightly reduce the green and
                     // remove half the blue
                     float[] factor = new float[] { 1.1f,.9f,.5f };
                     float[] offset = new float[] { 0f,0f,0f };
                     RescaleOp rop = new RescaleOp(factor,offset,null);
                     sepia = rop.filter(sepia,null);
        */

-----------------------------

